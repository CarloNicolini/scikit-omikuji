name: CI

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test-python:
    name: Test Python Package
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true
        
    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          omikuji/target/
          omikuji/c-api/target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
          
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
        
    - name: Cache uv dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/uv
        key: ${{ runner.os }}-uv-${{ matrix.python-version }}-${{ hashFiles('**/uv.lock') }}
        restore-keys: |
          ${{ runner.os }}-uv-${{ matrix.python-version }}-
          ${{ runner.os }}-uv-
          
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential
        
    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        # Ensure we have the latest command line tools
        xcode-select --install 2>/dev/null || true
        
    - name: Create virtual environment
      run: uv venv --python ${{ matrix.python-version }}
      
    - name: Activate virtual environment and install dependencies
      run: |
        source .venv/bin/activate
        uv sync --all-extras
        
    - name: Run pytest
      run: |
        source .venv/bin/activate
        pytest tests/test_skomikuji.py -v
        
    - name: Test CLI commands
      run: |
        source .venv/bin/activate
        python -m skomikuji.cli --help
        python -m skomikuji.cli predict --help
        python -m skomikuji.cli train --help

  build-wheels:
    name: Build Python Wheels
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true
        
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        
    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install build wheel
        
    - name: Build source distribution
      if: matrix.os == 'ubuntu-latest'
      run: python -m build --sdist
      
    - name: Build wheel
      run: python -m build --wheel
      
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.os }}
        path: dist/

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test-python]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true
        
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential
        
    - name: Create virtual environment and install package
      run: |
        uv venv --python 3.12
        source .venv/bin/activate
        uv sync --all-extras
        
    - name: Test package import
      run: |
        source .venv/bin/activate
        python -c "import skomikuji; print('✅ Package import successful')"
        python -c "from skomikuji import OmikujiClassifier; print('✅ OmikujiClassifier import successful')"
